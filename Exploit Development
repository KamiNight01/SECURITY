Exploit development is a potential phase or outcome of reverse engineering.
When performing exploit development, a cyber actor actively digs into a target object with the aim of understanding how it works better than its creators.
As the cyber actor gains more understanding of the object, they may find unintended functionality or vulnerabilities that the creators did not mitigate.
These unknown vulnerabilities are particularly dangerous as they can be actively exploited by attackers.
Alternatively, they can be mitigated by defendersif found before attackers exploit them.


HEAP
Memory that can be allocated and deallocated

STACK
A contiguous section of memory used for passing arguments

REGISTERS
Storage elements as close as possible to the central processing unit (CPU)

INSTRUCTION POINTER (IP)
a.k.a Program Counter (PC), contains the address of next instruction to be executed

STACK POINTER (SP)
Contains the address of the next available space on the stack

BASE POINTER (BP)
The base of the stack

FUNCTION
Code that is separate from the main program that is often used to replace code the repeats in order to make the program smaller and more efficient

SHELLCODE
The code that is executed once an exploit successfully takes advantage of a vulnerability. ( code that gives you a shell

---------------------------------------------------
Buffer Overflow Defenses

Non executable (NX) stack
Address Space Layout Randomization (ASLR) ( default activated on everything ) 
Data Execution Prevention (DEP)
Stack Canaries
Position Independent Executable (PIE)


Technical Help
Utilizing tools such as:

IDA, GHIDRA
GDB, MONA, IMMUNITY
BASH, PYTHON



GDB Uses
Installation of Peda Plugin

git clone https://github.com/longld/peda.git ~/peda
echo "source ~/peda/peda.py" >> ~/.gdbinit


Common Commands

disass <FUNCTION>   #   Disassemble portion of the program
info <...>  #   Supply info for specific stack areas
x/256c $<REGISTER>  #   Read characters from specific register
break <address>  #   Establish a break point





