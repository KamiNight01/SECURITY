Pentesting - 
Reporting: 
OPNOTES:- your Detalied infornation on the steps taken to gain access to the network:
-proper classification. 
-raw step by step notes 
FORMALIZED REPORTING :
less detalied more formalized and less of the raw information 
-more understadable by general public that you need to brief on.
--------------------------------------------------------------------------------------------------------------------------------------------------------
Vulnerability and Exploitation Research:

PHISHING:
phising - general phising sent to everyone
spear phising --- targeting specific groups (i.e: dod members) 

EXPLOIT RESEARCH 
Open Sources:produced from publicly available information that is collected, exploited, 
and disseminated in a timely manner to an appropriate audience for addressing a specific intelligence requirement

Organization capabilities:


Scanning and Reconnaissance:


SCRAPING DATA 


#!/usr/bin/python
import lxml.html
import requests

page = requests.get('http://quotes.toscrape.com')
tree = lxml.html.fromstring(page.content)

authors = tree.xpath('//small[@class="author"]/text()')

print ('Authors: ',authors)



--------------------------------------------------------------------------------------------------------------------------------------------------
Advanced Scanning Techniques

HOST DISCOVERY
Find hosts that are online

HOST ENUMERATION
Find ports for each host that is online
20-25,80 

HOST INTERROGATION
Find what service is running on each open/available port
banner grabbing through net cat 



PING SWEEP
for i in {1..254}; do (ping -c 1 192.168.1.$i | grep "bytes from" &); done

 
NMAP SCANN
nmap -Pn -T4 --min-rate 2324243245 10.50.37.95 -p22,80,8080,8888,2222,4444
nmap -Pn -T4 --min-rate 2324243245 10.50.37.95 -p22,80 --script=http-enum.nse
nmap -Pn -T4 --min-rate 2324243245 10.50.37.95 -p22,80 --script=banner.nse


-----------------------------------------------------------------------------------------------------------------------------------------------------
DAY 2
----------------------------------------------------------------------------------------------------------------------------------------------------
WEB EXPLOITATIONS:

Server/Client Relationship:
Synchronous communications between user and services
Not all data is not returned, client only receives what is allowed


Hyper-Text Transfer Protocol (HTTP)

Request/Response

Various tools to view:
tcpdump
wireshark
Developer Console

GET / HTTP/1.1

HTTP/1.1 200 OK

HTTP Methods
A Select Few:
GET
POST
HEAD
PUT
https://tools.ietf.org/html/rfc2616

HTTP Response Codes
10X == Informational
2XX == Success
30X == Redirection
4XX == Client Error
5XX == Server Error

HTTP Method Notes
GET request can be utilized to pass data to the server using the URL string:

https://www.columbiacountyga.gov/Home/Components/JobPosts/Job/1/1
/something.php?var=hi

WGET
Recursively download
Recover from broken transfers
SSL/TLS support

wget -r -l2 -P /tmp ftp://ftpserver/
wget --save-cookies cookies.txt --keep-session-cookies --post-data 'user=1&password=2' https://website
wget --load-cookies cookies.txt -p https://website/interesting/article.php


CURL
Not recursive
Can use pipes
Upload ability
Supports more protocols vs Wget, such as SCP & POP3

curl -o stuff.html https://web.site/stuff.html
curl 'https://web.site/submit.php' -H 'Cookie: name=123; settings=1,2,3,4,5,6,7' --data 'name=Stan' | base64 -d > item.png

JavaScript (JS)
Allows websites to interact with the client
JavaScript runs on the client’s machine
Coded as .JS files, or in-line of HTML

JS Interaction
<script>
function myFunction() {
    document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>

<script src="https://www.w3schools.com/js/myScript1.js"></script>




Cross-Site Scripting (XSS) Overview
Insertion of arbitrary code into a webpage, that executes in the browser of visitors
Unsanitized GET, POST, and PUT methods allow JS to be placed on websites
Often found in forums that allow HTML


Reflected XSS
Most common form of XSS
Transient, occurs in error messages or search results
Delivered through intermediate media, such as a link in an email
Characters that are normally illegal in URLs can be Base64 encoded
Below is what you see, but the server will decode as name=abc123
http://example.com/page.php?name=dXNlcjEyMw

Stored XSS
Resides on vulnerable site
Only requires user to visit page
<img src="http://invalid" onerror="window.open('http://10.50.XX.XX:8000/ram.png','xss','height=1,width=1');">



Useful JavaScript Components
Proof of concept (simple alert):

<script>alert('XSS');</script>

Capturing Cookies
document.cookie

Capturing Keystrokes
bind KEYDOWN and KEYUP

Capturing Sensitive Data
document.body.innerHTML


Server-Side injection
Directory Traversal/Path Traversal
Ability to read/execute outside web server’s directory
Uses ../../ (relative paths) in manipulating a server-side file path
view_image.php?file=../../etc/passwd




Malicious File Upload
Site allows unsanitized file uploads

Server doesn’t validate extension or size
Allows for code execution (shell)
Once uploaded
Find your file
Call your file

Command Injection
Application on the server is vulnerable,
allowing execution of arbitrary commands
User input not validated
Common example is a SOHO router, with a web page to allow ping

Might contain the following in it’s code:
system("ping -c 1 ".$_GET["ip"]);

Run the following to chain/stack our arbitrary command
; cat /etc/passwd

----------------------------------------------------------------------------------------------------------------------------------------------------
















